https://overthewire.org/wargames/bandit
ssh bandit0@bandit.labs.overthewire.org -p 2220

level0
	bandit0
	bandit0
level1
	bandit1
	boJ9jbbUNNfktd78OOpsqOltutMc3MY1
level2
	bandit2
	CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9
level3
	bandit3
	UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK
level4
	bandit4
	pIwrPrtPN36QITSp3EQaw936yaFoFgAB
level5
	bandit5
	koReBOKuIDDepwhWk7jZC0RTdopnAYKh
level6
	bandit6
	DXjZPULLxYr17uwoI01bNLQbtFemEgo7
level7 
	bandit7
	HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs
	Notes: 
		Had to use find / -user bandit7 -group bandit6 -size 33c
		Could have used find / -user bandit7 -group bandit6 -size 33c 2>&1  | grep -v "Permission denied"
level8
	bandit8
	cvX2JJa4CFALtqS87jk27qwqGhBM9plV
	Notes: 
		used grep from earlier... strings data.txt 2>&1 | grep '^millionth'
level9
	bandit9
	UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR
	Notes:
		piped in sort, uniq, and gave the occurance count like this: strings data.txt 2>&1 | sort |uniq -c | sort -nr
level10
	bandit10
	truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk
	Notes:
		had to use a wildcard on grep which is .* like this: strings data.txt 2>&1 | grep '^.*='
level11
	bandit11
	IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR
	notes: it was encoded in b64 so in python we used base64.b64decode()
level12
	bandit12
	5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu
	Notes: 
		used codecs.decode(cstr, 'rot_13') after importing codecs in python
level13
	bandit13
	8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL
	Notes:
		ran xxd -r data.txt data to convert the hexdump to bianary. then file to find the actual file type. mv to rename to that.
		gzip: ran gzip -d to decompress
		bzip2 ran bzip2 -d to decompress
		POSIX tar: ran tar xvf to extract
level14
	bandit14
	4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e
	Notes:
		had to ssh @localhost
		use whoami to make sure im the right bandit
		cat the password from the file mentioned in instructions
level15
	bandit15
	BfMYroe26WYalil77FoDi9qh59eK5xNr
	Notes:
		nc sends data to a port it you pip with an echo: nc localhost 30000
level16
	bandit16
	cluFn7wTiGryunymYOu4RcffSxQluehd
	Notes:
		echo "BfMYroe26WYalil77FoDi9qh59eK5xNr" | openssl s_client -connect localhost:30001 -ign_eof
		sending the key via SSL to local port. 
		ign_eof is needed to ensure the connection does not close before the server sends the final message.
level17
	bandit17
	xLYVMN9WE5zQ5vHacb0sZEVqbrp7nBTn
	Notes:
		Had to scan a port range: nmap -p 31000-32000 localhost
		found the private ssh key and saved to a sshkey.private file in tmp
		had to convert the key to private: chmod 400 sshkey.private
		cat /etc/bandit_pass/bandit17
level18
	bandit18
	kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd
	Notes:
		simple diff on the two files
level19
	bandit19
	IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x
	Notes:
		Auto logout ... add "bash --noprofile" to the ssh call to bypass the modded bashrc
level20
	bandit20
	GbKksEFF4yrVs6il55v6gwY5aVje5f0j
	Notes:
		Missed this completly: when I ran the exe with id it showed me my id's (bandit19) AND a bandit20 id.
			Meaning it was running the id function for both bandit20 and bandit19
		So run the elf with cat and the file in the other directory and it will execute and give password
level21
	bandit21
	gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr
	Notes:
		ok this is new: it listens to tcp on localhost for old password and transmits new password.
			so we need to build a tcp that broadcasts the old password.
		we can use netcat for this: nc host port
			echo "GbKksEFF4yrVs6il55v6gwY5aVje5f0j" | nc -l localhost -p 61337 &
			use ps -aux to make sure the service started (including process IDs)
			be sure to kill the process when done: kill <processID>
level22
	bandit22
	Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI
	Notes:
		I guess the point of this excersize was to point out passwords stored in crontab?
		Kind of straight forward.
level23
	bandit23
	jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n
	Notes:
		Simply ran parts of the code in terminal changing variables.
level24
	bandit24
	UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ
	Notes:
		doing recon, found that scripts in /var/spool/$myname are executed every min. 
			So lets make a script to copy a file contents to our file
				!# /bin/bash
				cat /etc/bandit_pass/bandit24 > /tmp/secttp/password
		mkdir to get a working space to put the file in
		touch will make a file if it does not already exist: touch zeScript.sh; chmod 777 zeScript.sh
		copy my file over to the dir where the scripts run every min and wait.
level25
	bandit25
	uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG
	Notes:
		Need to brute force through 9999 keys to find the right one.
		Need to post the key with the previous password to the correct port
			#!/bin/bash
			passwd24=UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ
			for i in {0000..9999}; do
						echo "$passwd24 $i"
			done | nc localhost 30002  | grep -v Wrong | grep -v "I am the pincode checker for user bandit25"
		pip the brute force loop through the connection to the right port.
		grep -v reverses the true/false flags. So basically we are pip "not" those things. So only print the right anwser
level26
	bandit26
	5czgV9L3Xx8JPOyRbXh6lQbmIOWvPT6Z
	Notes:
		ssh -i is used to connect ssh with a private key.
			ssh -i bandit26.sshkey bandit26@localhost "bash --noprofile"
		had to add the noprofile to get in and found myself not in a bin/bash :/
			Check for echo: echo /usr/bin/*
			Check escape characters: > >> < | & ; : ' " `
			Whoami: $(whoami) or ${whoami}
			python: import os; os.system("/bin/sh")
			python: use CTRL+D to escape out then try print(1) ... if that works ... import pty; pty.spawn('/bin/sh')
			php: exec("sh -i");
			pearl: exec "/bin/sh";
			Ruby: exec "/bin/sh"
			Lua: os.execute("/bin/sh")
			awk 'BEGIN {system("/bin/sh")}'
			find / -name foobar -exec /bin/sh \;
		No luck ... lets see from user25 what the terminal IS: 
			cat /etc/passwd | grep bandit26
			its something called "showtext"
		So it looks like it uses something called "more" to get that to trigger we have to make the terminal crazy small
			This forces more into an edit mode. in vim
			from there we can use the e command on the password file to get the password.
			we can also set shell like :set shell=/bin/bash and then :shell
		Try using $ to run commands
			$0 might exit
level27
	bandit27
	3ba3118a22e93127a4ed485be72ef5ea
	Notes:
		Grabbed the password from the file using that elf
level28
	bandit28
	0ef186ac70e04ea33b4c1853d2526fa2
	Notes:
		have to clone a git repo lol
level29
	bandit29
	bbc96594b4e001778eee9975372716b2
	Notes:
		another git clone
		Needed to use: git log -p
level30
	bandit30
	5b90576bedb2cc04c86a9e924ce42faf
	Notes:
		more git clone
		no passwords in prod ... checkout dev ... found it on the git log -p
level31
	bandit31
	47e603bb428404d265f59c42920d81e5
	Notes:
		Found a git tag
		had to use: git show <tag> to see it
level32
	bandit32
	56a9bf19c63d650ce78e6ec0354ee45e
	Notes:
		Had to create a new file with key txt in it.
		Then add it to the repo and push the repo to master.
			echo "May I come in?" > key.txt
			git add key.txt
			git add key.txt -f (because our gitnor was ignoring it)
			git push origin master
			annnndddddd we got a key in the return message
level33
	bandit33
	c9c3199ddf4121b10cf581a98d51caee
	Notes:
		Found that $ in front of things seems to work.
			$0 exited
		After examining the elf I ended up cat on the password file on the server location
			cat /etc/bandit_pass/bandit33
level34
	bandit34
	
	Notes:
		
		


	
